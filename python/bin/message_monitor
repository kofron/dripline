#!/usr/bin/python
'''
message monitoring port based on service class
'''

from __future__ import absolute_import

import logging

from dripline.core import DriplineParser, Message, Service, exceptions

logger = logging.getLogger("monitor_service")

class Monitor(Service):
    def __init__(self, payload_only, **kwargs):
        Service.__init__(self, **kwargs)
        self._payload_only = payload_only

    def on_message(self, unused_channel, basic_deliver, properties, body):
        try:
            decoded = Message.from_encoded(body, properties.content_encoding)
            if self._payload_only:
                decoded = decoded.payload
        except exceptions.DriplineDecodingError as err:
            pass
        logger.log(35, # log at a level that prints even without a -v
                   '\n{} [{}]     (From App [routing_key])\n{}'.format(
                        properties.app_id,
                        basic_deliver.routing_key,
                        decoded or body,
                       )
                  )
        super(Monitor, self).on_message(unused_channel, basic_deliver, properties, body)

def start_monitoring(**kwargs):
    monitor = Monitor(
                      payload_only=kwargs['payload_only'],
                      amqp_url = kwargs['broker'],
                      exchange = kwargs['exchange'],
                      keys = kwargs['keys'],
                     )
    monitor.run()

if __name__ == '__main__':
    monitor_doc = '''
                  a more DRY version of message_monitor
                  '''
    parser = DriplineParser(description=monitor_doc,
                            amqp_broker=True,
                            config_file=True,
                            tmux_support=True,
                            extra_logger=logger,
                           )
    parser.add_argument('-e',
                        '--exchange',
                        metavar='exchange name',
                        help='amqp name of the exchange to monitor',
                        default='alerts',
                       )
    parser.add_argument('-k',
                        '--keys',
                        metavar='keys',
                        help='amqp binding keys to follow',
                        default='#',
                        nargs='*',
                       )
    parser.add_argument('-po',
                        '--payload-only',
                        metavar='payload_only',
                        help='Print only the message.payload',
                        default=False, #value if not present
                        action='store_const',
                        const=True, #value if present w/o value
                        #type=bool,
                        #nargs='?',
                       )
    kwargs = parser.parse_args()
    
    try:
        start_monitoring(**vars(kwargs))
    except KeyboardInterrupt:
        logger.info('exiting')
