#!/usr/bin/python
""" dripline_agent
Do simple stuff like gets and sets.
"""
from __future__ import absolute_import

import types
import uuid

from dripline.core import message, constants, DriplineParser, Connection, Message, exceptions

import logging
logger = logging.getLogger('dripline_agent')
logger.setLevel(logging.DEBUG)

def verb_list():
    """
    A list of acceptable verb arguments.
    """
    verbs = [v[3:].lower() for v in dir(constants) if v.startswith('OP_')]
    return verbs


def main(args):
    request_verb = args.verb
    msgop = getattr(constants, 'OP_'+request_verb.upper())
    conn = Connection(args.broker)

    values = []
    payload = {}
    for val in args.values:
        temp_val = val
        try:
            temp_val = float(val)
            temp_val = int(val)
        except ValueError:
            if isinstance(temp_val, types.StringType):
                try:
                    if val.lower() == 'true':
                        temp_val = True
                    elif val.lower() == 'false':
                        temp_val = False
                    elif val.lower() in ['none', 'nil', 'null']:
                        temp_val = None
                except ValueError:
                    pass
            pass
        finally:
            if isinstance(temp_val, types.StringType):
                if len(temp_val.split('=')) > 1:
                    value = '='.join(temp_val.split('=')[1:])
                    payload.update({temp_val.split('=')[0]:value})
                else:
                    values.append(temp_val)
                
            else:
                values.append(temp_val)

    payload.update({'values':values})
    logger.debug('payload will be: {}'.format(payload))
    request = message.RequestMessage(msgop=msgop, payload=payload)
    try:
        reply = conn.send_request(args.target, request)
    except exceptions.DriplineException as dripline_error:
        logger.warning(dripline_error.message)
        return
    if not isinstance(reply, Message):
        result = Message.from_msgpack(reply)
    else:
        result = reply
    print_prefix = '->'.join([args.target]+args.values)
    color = ''
    if not result.retcode == 0:
        color = '\033[91m'
    print('{color}{}: {}\033[0m'.format(print_prefix, result.payload, color=color))


if __name__ == '__main__':
    agent_doc = '''
                dripline_agent provides basic a CLI to the dripline system.
                '''
    parser = DriplineParser(description=agent_doc,
                            amqp_broker=True,
                            config_file=True,
                            tmux_support=True,
                            twitter_support=True,
                            extra_logger=logger,
                           )
    parser.add_argument('verb', choices=verb_list())
    parser.add_argument('target')
    parser.add_argument('values', nargs='*')

    args = parser.parse_args()
    try:
        main(args)
    except KeyboardInterrupt:
        pass
